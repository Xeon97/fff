
# -*- coding: utf-8 -*-
# meta developer: @YourTelegramUsername
# meta description: –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö.
# meta license: MIT

from .. import loader, utils

@loader.tds
class SearchMessagesByKeywordsMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö."""

    strings = {"name": "SearchMessagesByKeywords"}

    async def poisksocmd(self, message):
        """
        .poiskso (@username) (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞) - –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
        """
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ: (@username –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ) (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")
            return

        args_split = args.split(" ", 1)
        target_user = None
        keywords = ""

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if len(args_split) == 2 and args_split[0].startswith("@"):
            target_user = args_split[0].strip("@")
            keywords = args_split[1].strip()
        else:
            keywords = args.strip()

        if not keywords:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        await utils.answer(message, f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: '{keywords}'...")

        results = []
        async for dialog in self._client.iter_dialogs():
            chat_id = dialog.id
            async for msg in self._client.iter_messages(chat_id, search=keywords, from_user=target_user):
                results.append(f"üìç [{utils.escape_html(msg.text[:50])}](https://t.me/c/{chat_id}/{msg.id})")

        if results:
            await utils.answer(
                message,
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π:
" + "\n".join(results[:50]) +
                ("\n\n–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ..." if len(results) > 50 else "")
            )
        else:
            await utils.answer(message, "‚ùå –°–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
